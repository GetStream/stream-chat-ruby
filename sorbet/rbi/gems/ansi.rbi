# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ansi/all/ansi.rbi
#
# ansi-1.5.0

module ANSI
  def self.const_missing(name); end
  def self.metadata; end
  def self.string(str); end
  extend ANSI::Code
end
module ANSI::Constants
end
module ANSI::Code
  def [](*codes); end
  def ansi(*codes); end
  def back(spaces = nil); end
  def black_on_black(string = nil); end
  def black_on_blue(string = nil); end
  def black_on_cyan(string = nil); end
  def black_on_green(string = nil); end
  def black_on_magenta(string = nil); end
  def black_on_red(string = nil); end
  def black_on_white(string = nil); end
  def black_on_yellow(string = nil); end
  def blue_on_black(string = nil); end
  def blue_on_blue(string = nil); end
  def blue_on_cyan(string = nil); end
  def blue_on_green(string = nil); end
  def blue_on_magenta(string = nil); end
  def blue_on_red(string = nil); end
  def blue_on_white(string = nil); end
  def blue_on_yellow(string = nil); end
  def code(*codes); end
  def color(*codes); end
  def cyan_on_black(string = nil); end
  def cyan_on_blue(string = nil); end
  def cyan_on_cyan(string = nil); end
  def cyan_on_green(string = nil); end
  def cyan_on_magenta(string = nil); end
  def cyan_on_red(string = nil); end
  def cyan_on_white(string = nil); end
  def cyan_on_yellow(string = nil); end
  def display(line, column = nil); end
  def down(spaces = nil); end
  def forward(spaces = nil); end
  def green_on_black(string = nil); end
  def green_on_blue(string = nil); end
  def green_on_cyan(string = nil); end
  def green_on_green(string = nil); end
  def green_on_magenta(string = nil); end
  def green_on_red(string = nil); end
  def green_on_white(string = nil); end
  def green_on_yellow(string = nil); end
  def hex_code(string, background = nil); end
  def left(spaces = nil); end
  def magenta_on_black(string = nil); end
  def magenta_on_blue(string = nil); end
  def magenta_on_cyan(string = nil); end
  def magenta_on_green(string = nil); end
  def magenta_on_magenta(string = nil); end
  def magenta_on_red(string = nil); end
  def magenta_on_white(string = nil); end
  def magenta_on_yellow(string = nil); end
  def method_missing(code, *args, &blk); end
  def move(line, column = nil); end
  def random(background = nil); end
  def red_on_black(string = nil); end
  def red_on_blue(string = nil); end
  def red_on_cyan(string = nil); end
  def red_on_green(string = nil); end
  def red_on_magenta(string = nil); end
  def red_on_red(string = nil); end
  def red_on_white(string = nil); end
  def red_on_yellow(string = nil); end
  def rgb(*args); end
  def rgb_256(r, g, b); end
  def rgb_code(red, green, blue, background = nil); end
  def right(spaces = nil); end
  def self.colors; end
  def self.styles; end
  def style(*codes); end
  def unansi(string = nil); end
  def uncolor(string = nil); end
  def unstyle(string = nil); end
  def up(spaces = nil); end
  def white_on_black(string = nil); end
  def white_on_blue(string = nil); end
  def white_on_cyan(string = nil); end
  def white_on_green(string = nil); end
  def white_on_magenta(string = nil); end
  def white_on_red(string = nil); end
  def white_on_white(string = nil); end
  def white_on_yellow(string = nil); end
  def yellow_on_black(string = nil); end
  def yellow_on_blue(string = nil); end
  def yellow_on_cyan(string = nil); end
  def yellow_on_green(string = nil); end
  def yellow_on_magenta(string = nil); end
  def yellow_on_red(string = nil); end
  def yellow_on_white(string = nil); end
  def yellow_on_yellow(string = nil); end
  extend ANSI::Code
  include ANSI::Constants
end
class ANSI::Chain
  def codes; end
  def initialize(string); end
  def method_missing(s, *a, &b); end
  def string; end
  def to_s; end
  def to_str; end
end
class String
  def ansi!(*codes); end
  def ansi(*codes); end
  def unansi!; end
  def unansi; end
end
module ANSI::BBCode
  def self.ansi(colorname); end
  def self.ansi_to_bbcode(string); end
  def self.ansi_to_html(string); end
  def self.bbcode_to_ansi(string, usecolors = nil); end
  def self.bbcode_to_html(string); end
  def self.html_to_ansi(string); end
  def self.html_to_bbcode(string); end
  def self.strip_bbcode(string); end
end
module ANSI::Terminal
  def get_character(input = nil); end
  def raw_no_echo_mode; end
  def restore_mode; end
  def self.get_character(input = nil); end
  def self.raw_no_echo_mode; end
  def self.restore_mode; end
  def self.terminal_height; end
  def self.terminal_size; end
  def self.terminal_width; end
  def terminal_height; end
  def terminal_size; end
  def terminal_width; end
end
class ANSI::Columns
  def align; end
  def align=(symbol); end
  def ansi_formatting(cell, col, row); end
  def columns; end
  def columns=(integer); end
  def format; end
  def format=(procedure); end
  def initialize(list, options = nil, &format); end
  def inspect; end
  def join(cols = nil); end
  def list; end
  def list=(list); end
  def padding; end
  def padding=(pad); end
  def template(max, pad); end
  def to_s(cols = nil); end
  def to_s_columns(columns = nil); end
end
class ANSI::Diff
  def common(x, y); end
  def compare(x, y); end
  def convert(object); end
  def diff1; end
  def diff2; end
  def diff_string(string1, string2); end
  def initialize(object1, object2, options = nil); end
  def join(separator = nil); end
  def lcs(s1, s2); end
  def lcs_size(s1, s2); end
  def self.diff(object1, object2, options = nil); end
  def to_a; end
  def to_s; end
end
class ANSI::Logger < Logger
  def ansicolor=(on); end
  def ansicolor?; end
  def debug(progname = nil, &block); end
  def debug_with_color; end
  def error(progname = nil, &block); end
  def error_with_color; end
  def fatal(progname = nil, &block); end
  def fatal_with_color; end
  def formatter(&block); end
  def info(progname = nil, &block); end
  def info_with_color; end
  def styles(options = nil); end
  def warn(progname = nil, &block); end
  def warn_with_color; end
end
class Logger
end
class Logger::LogDevice
  def ansicolor=(arg0); end
  def ansicolor?; end
end
module ANSI::Mixin
  def black; end
  def black_on_blue; end
  def black_on_cyan; end
  def black_on_green; end
  def black_on_magenta; end
  def black_on_red; end
  def black_on_white; end
  def black_on_yellow; end
  def blink; end
  def blue; end
  def blue_on_black; end
  def blue_on_cyan; end
  def blue_on_green; end
  def blue_on_magenta; end
  def blue_on_red; end
  def blue_on_white; end
  def blue_on_yellow; end
  def bold; end
  def concealed; end
  def cyan; end
  def cyan_on_black; end
  def cyan_on_blue; end
  def cyan_on_green; end
  def cyan_on_magenta; end
  def cyan_on_red; end
  def cyan_on_white; end
  def cyan_on_yellow; end
  def dark; end
  def display(line, column = nil); end
  def green; end
  def green_on_black; end
  def green_on_blue; end
  def green_on_cyan; end
  def green_on_magenta; end
  def green_on_red; end
  def green_on_white; end
  def green_on_yellow; end
  def italic; end
  def magenta; end
  def magenta_on_black; end
  def magenta_on_blue; end
  def magenta_on_cyan; end
  def magenta_on_green; end
  def magenta_on_red; end
  def magenta_on_white; end
  def magenta_on_yellow; end
  def negative; end
  def on_black; end
  def on_blue; end
  def on_cyan; end
  def on_green; end
  def on_magenta; end
  def on_red; end
  def on_white; end
  def on_yellow; end
  def rapid; end
  def red; end
  def red_on_black; end
  def red_on_blue; end
  def red_on_cyan; end
  def red_on_green; end
  def red_on_magenta; end
  def red_on_white; end
  def red_on_yellow; end
  def reverse; end
  def strike; end
  def underline; end
  def underscore; end
  def white; end
  def white_on_black; end
  def white_on_blue; end
  def white_on_cyan; end
  def white_on_green; end
  def white_on_magenta; end
  def white_on_red; end
  def white_on_yellow; end
  def yellow; end
  def yellow_on_black; end
  def yellow_on_blue; end
  def yellow_on_cyan; end
  def yellow_on_green; end
  def yellow_on_magenta; end
  def yellow_on_red; end
  def yellow_on_white; end
end
class ANSI::ProgressBar
  def bar; end
  def bar_mark=(mark); end
  def barmark=(mark); end
  def bytes; end
  def clear; end
  def colorize(part, style); end
  def convert_bytes(bytes); end
  def elapsed; end
  def eol; end
  def eta; end
  def file_transfer_mode; end
  def finish; end
  def flush; end
  def format(format, *arguments); end
  def format=(arg0); end
  def format_arguments; end
  def format_arguments=(arg0); end
  def format_time(t); end
  def get_width; end
  def halt; end
  def inc(step = nil); end
  def initialize(title, total, out = nil); end
  def inspect; end
  def mark=(mark); end
  def percentage; end
  def reset; end
  def set(count); end
  def show; end
  def show_progress; end
  def standard_mode; end
  def stat; end
  def stat_for_file_transfer; end
  def style(options); end
  def styles; end
  def styles=(arg0); end
  def title; end
  def title=(str); end
  def total_overflow=(boolv); end
  def transfer_mode; end
  def transfer_rate; end
end
class ANSI::String
  def +(other); end
  def [](*args); end
  def ansi!(code); end
  def ansi(code); end
  def black!; end
  def black; end
  def blue!; end
  def blue; end
  def bold!; end
  def bold; end
  def color!(code); end
  def color(code); end
  def cyan!; end
  def cyan; end
  def downcase!; end
  def downcase; end
  def green!; end
  def green; end
  def gsub!(pattern, replacement = nil, &block); end
  def gsub(pattern, replacement = nil, &block); end
  def initialize(text = nil, marks = nil); end
  def magenta!; end
  def magenta; end
  def marks; end
  def red!; end
  def red; end
  def shift_marks!(index, delta); end
  def shift_marks(index, delta, marks = nil); end
  def size; end
  def slice(*args); end
  def sub!(pattern, replacement = nil, &block); end
  def sub(pattern, replacement = nil, &block); end
  def text; end
  def to_s; end
  def to_str; end
  def underline!; end
  def underline; end
  def upcase!; end
  def upcase; end
  def yellow!; end
  def yellow; end
end
class ANSI::Table
  def align; end
  def align=(arg0); end
  def ansi_formating(cell, col, row); end
  def apply_format(str, cell, col, row); end
  def border; end
  def border=(arg0); end
  def cell_template(max); end
  def column_size; end
  def dividing_line; end
  def fit; end
  def fit=(arg0); end
  def fit_width; end
  def format; end
  def format=(arg0); end
  def initialize(table, options = nil, &format); end
  def max_columns(fit = nil); end
  def padding; end
  def padding=(arg0); end
  def table; end
  def table=(arg0); end
  def to_s; end
end
class Object < BasicObject
  def ansi(string, *codes); end
end
